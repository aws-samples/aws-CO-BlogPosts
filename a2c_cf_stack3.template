{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "",
  "Parameters": {
  "InstanceTypeParameter": {
      "Type": "String",
      "Default": "t2.large",
      "AllowedValues": [ "t2.medium", "t2.large", "t2.xlarge" ],
      "Description": "Instance type to be used for the EC2 instances"
    }
  },
  "Mappings" : {
    "RegionToAMIID" : {
    "eu-west-2"         : {"SourceMachine" : "ami-03e969fd56ea76acb", "WorkerMachine" : "ami-0bdd1dc04f8135b4b"},
    "ap-southeast-1"    : {"SourceMachine" : "ami-039ba649ead5b0ecf", "WorkerMachine" : "ami-0617f7ed92d5ffcb4"},
    "us-east-1"         : {"SourceMachine" : "ami-0a88de54494584ebf", "WorkerMachine" : "ami-0b87158ab3291a9b6"},
    "us-west-2"         : {"SourceMachine" : "ami-02b2da15caf7d563b", "WorkerMachine" : "ami-040bfe862f02dad9f"}
    }
},
  "Resources": {
    "a2cVPC": {
      "Type": "AWS::EC2::VPC",
       "Metadata": {
        "cfn_nag": {
            "rules_to_suppress": [
                {
                    "id": "W60",
                    "reason": "No need for Flow logs in this Demo"
                }
            ]
        }
      },
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "App2Container-VPC"
          }
        ]
      }
    },
    "Pub1": {
      "Type": "AWS::EC2::Subnet",
       "Metadata": {
        "cfn_nag": {
            "rules_to_suppress": [
                {
                    "id": "W33",
                    "reason": "This is an example to provide customers with an idea"
                }
            ]
        }
      },
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            { "Fn::GetAZs": "" }
          ]
        },
        "CidrBlock": "10.0.1.0/24",
        "MapPublicIpOnLaunch": true,
        "VpcId": { "Ref": "a2cVPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "a2c-Public-Subnet-1"
          }
        ]
      }
    },
    "Pub2": {
      "Type": "AWS::EC2::Subnet",
       "Metadata": {
        "cfn_nag": {
            "rules_to_suppress": [
                {
                    "id": "W33",
                    "reason": "This is an example to provide customers with an idea"
                }
            ]
        }
      },
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            { "Fn::GetAZs": "" }
          ]
        },
        "CidrBlock": "10.0.2.0/24",
        "MapPublicIpOnLaunch": true,
        "VpcId": { "Ref": "a2cVPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "a2c-Public-Subnet-2"
          }
        ]
      }
    },
    "Pri1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            { "Fn::GetAZs": "" }
          ]
        },
        "CidrBlock": "10.0.3.0/24",
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "a2cVPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "a2c-Private-Subnet-1"
          }
        ]
      }
    },
    "Pri2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            { "Fn::GetAZs": "" }
          ]
        },
        "CidrBlock": "10.0.4.0/24",
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "a2cVPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "a2c-Private-Subnet-2"
          }
        ]
      }
    },
    "PubRT": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "a2cVPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "a2c-Public-RouteTable"
          }
        ]
      }
    },
    "PriRT": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "a2cVPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "a2c-Private-RouteTable"
          }
        ]
      }
    },
    "PubRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "DevIg" },
        "RouteTableId": { "Ref": "PubRT" }
      }
    },
    "DevIg": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "a2c-IGW"
          }
        ]
      }
    },
    "AttachIG": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "a2cVPC" },
        "InternetGatewayId": { "Ref": "DevIg" }
      }
    },
    "Pub1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Pub1" },
        "RouteTableId": { "Ref": "PubRT" }
      }
    },
    "Pub2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Pub2" },
        "RouteTableId": { "Ref": "PubRT" }
      }
    },
    "Pri1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Pri1" },
        "RouteTableId": { "Ref": "PriRT" }
      }
    },
    "Pri2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Pri2" },
        "RouteTableId": { "Ref": "PriRT" }
      }
    },
    "MyECSRole": {
      "Type": "AWS::IAM::Role",
      "Metadata": {
        "cfn_nag": {
            "rules_to_suppress": [
                {
                    "id": "W28",
                    "reason": "This is not a sample code; it has been created solely for demonstration purposes"
                }
            ]
        }
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs-tasks.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "RoleName": "ecsTaskExecutionRole",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        ]
      }
    },
    "a2cEC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
       "Metadata": {
        "cfn_nag": {
            "rules_to_suppress": [
                {
                    "id": "W2",
                    "reason": "This is a for web server intended for public access, created for demonstration purposes. A warning note has been added to the blog."
                },
                {
                    "id": "W36",
                    "reason": "This is a for web server intended for public access, created for demonstration purposes. A warning note has been added to the blog."
                },
                {
                    "id": "W9",
                    "reason": "This is a for web server intended for public access, created for demonstration purposes. A warning note has been added to the blog."
                },
                {
                    "id": "W40",
                    "reason": "This is a for web server intended for public access, created for demonstration purposes. A warning note has been added to the blog."
                },
                {
                    "id": "W5",
                    "reason": "This is a for web server intended for public access, created for demonstration purposes. A warning note has been added to the blog."
                },
                {
                    "id": "W42",
                    "reason": "This is a for web server intended for public access, created for demonstration purposes. A warning note has been added to the blog."
                },
                {
                    "id": "W28",
                    "reason": "This is not a sample code; it has been created solely for demonstration purposes"
                }               
            ]
        }
      },
      "Properties": {
        "GroupName": "A2C-Machine-SecurityGroup",
        "GroupDescription": "Security group for EC2 instances with RDP Access and internal network access",
        "VpcId": { "Ref": "a2cVPC"},
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 3389,
            "ToPort": 3389,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 3389,
            "ToPort": 3389,
            "CidrIpv6": "::/0"
          },
          {
            "IpProtocol": "-1",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "10.0.0.0/16"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "SourceMachineRole": {
        "Type":"AWS::IAM::Role",
        "Metadata": {
        "cfn_nag": {
            "rules_to_suppress": [
                {
                    "id": "W28",
                    "reason": "This is not a sample code; it has been created solely for demonstration purposes"
                }
            ]
        }
      },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [{
               "Effect": "Allow",
               "Principal": {
                  "Service": ["ec2.amazonaws.com"]
               },
               "Action": ["sts:AssumeRole"]
            }
          ]
         },
         "ManagedPolicyArns" :  [
          "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
         ],
         "RoleName" : "SourceMachineRole"
        }
    },
    "A2CInstanceProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "InstanceProfileName" : "SourceMachineInstanceProfile",
          "Path": "/",
           "Roles": [{ "Ref": "SourceMachineRole" }]
        }   
    },
    "SourceNode": {
        "Type": "AWS::EC2::Instance",
        "Metadata": {
          "AWS::CloudFormation::Init": {
            "configSets": {
              "config": [
                "prereq",
                "post_reboot",
                "signal_complete"
              ]
            },
            "prereq": {
              "files": {
                "c:\\cfn\\cfn-hup.conf": {
                  "content": {
                    "Fn::Join": [
                      "",
                      [
                        "[main]\n",
                        "stack=",
                        { "Ref": "AWS::StackName" },
                        "\n",
                        "region=",
                        { "Ref": "AWS::Region" },
                        "\n"
                      ]
                    ]
                  }
                },
                "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                  "content": {
                    "Fn::Join": [
                      "",
                      [
                        "[cfn-auto-reloader-hook]\n",
                        "triggers=post.update\n",
                        "path=Resources.WorkerNode.Metadata.AWS::CloudFormation::Init\n",
                        "action=cfn-init.exe -v -c config -s ",
                        { "Ref": "AWS::StackName" },
                        " -r SourceNode",
                        " --region ",
                        { "Ref": "AWS::Region" },
                        "\n"
                      ]
                    ]
                  }
                }
              },
              "services": {
                "windows": {
                  "cfn-hup": {
                    "enabled": "true",
                    "ensureRunning": "true",
                    "files": [ "c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" ]
                  }
                }
              }
            },
            "post_reboot": {
              "commands": {
                "01-restart": {
                  "command": {
                    "Fn::Join": [
                      "",
                      [
                        "powershell.exe -Command \"Rename-Computer -NewName 'SourceNode' -Restart -Force\""
                      ]
                    ]
                  },
                  "waitAfterCompletion": "forever"
                }
              }
            },
            "signal_complete": {
              "commands": {
                "1-signal-resource": {
                  "command": {
                    "Fn::Join": [
                      "",
                      [
                        "cfn-signal.exe -e %ERRORLEVEL% --resource SourceNode --stack ",
                        {
                          "Ref": "AWS::StackName"
                        },
                        "         --region ",
                        {
                          "Ref": "AWS::Region"
                        }
                      ]
                    ]
                  }
                }
              }
            }
          }
        },
        "Properties": {
          "ImageId": { "Fn::FindInMap" : [ "RegionToAMIID", { "Ref" : "AWS::Region" }, "SourceMachine" ]},
          "Tags": [
            {
              "Key": "Name",
              "Value": "SourceNode"
            }
          ],
          "InstanceType": { "Ref": "InstanceTypeParameter" },
          "IamInstanceProfile": { "Ref": "A2CInstanceProfile"},
          "SubnetId": { "Ref": "Pub1" },
          "SecurityGroupIds": [ { "Ref": "a2cEC2SecurityGroup" } ]
        }
      },
    "A2CRole": {
        "Type":"AWS::IAM::Role",
        "Metadata": {
         "cfn_nag": {
             "rules_to_suppress": [
                 {
                    "id": "W44",
                    "reason": "This code includes AdministratorAccess and is intended for demo purposes only"
                 },
                 {
                    "id": "W28",
                    "reason": "This is not a sample code; it has been created solely for demonstration purposes"
                }
             ]
         }
       },
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [{
               "Effect": "Allow",
               "Principal": {
                  "Service": ["ec2.amazonaws.com"]
               },
               "Action": ["sts:AssumeRole"]
            }
          ]
         },
         "ManagedPolicyArns" :  [
          "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
          "arn:aws:iam::aws:policy/SecretsManagerReadWrite",
          "arn:aws:iam::aws:policy/AmazonECS_FullAccess",
          "arn:aws:iam::aws:policy/PowerUserAccess"
         ],
         "RoleName" : "A2CRole"
        }
    },
    "A2CInstanceProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "InstanceProfileName" : "A2CInstanceProfile",
          "Path": "/",
           "Roles": [{ "Ref": "A2CRole" }]
        }   
    },
    "WorkerNode": {
        "Type": "AWS::EC2::Instance",
        "Metadata": {
          "AWS::CloudFormation::Init": {
            "configSets": {
              "config": [
                "prereq",
                "programs",
                "post_reboot",
                "signal_complete"
              ]
            },
            "prereq": {
              "files": {
                "c:\\cfn\\cfn-hup.conf": {
                  "content": {
                    "Fn::Join": [
                      "",
                      [
                        "[main]\n",
                        "stack=",
                        { "Ref": "AWS::StackName" },
                        "\n",
                        "region=",
                        { "Ref": "AWS::Region" },
                        "\n"
                      ]
                    ]
                  }
                },
                "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                  "content": {
                    "Fn::Join": [
                      "",
                      [
                        "[cfn-auto-reloader-hook]\n",
                        "triggers=post.update\n",
                        "path=Resources.WorkerNode.Metadata.AWS::CloudFormation::Init\n",
                        "action=cfn-init.exe -v -c config -s ",
                        { "Ref": "AWS::StackName" },
                        " -r WorkerNode",
                        " --region ",
                        { "Ref": "AWS::Region" },
                        "\n"
                      ]
                    ]
                  }
                }
              },
              "services": {
                "windows": {
                  "cfn-hup": {
                    "enabled": "true",
                    "ensureRunning": "true",
                    "files": [ "c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" ]
                  }
                }
              }
            },
            "programs": {
              "commands" : {
                  "01-installSQLCMD" : {
                      "command": "C:\\ProgramData\\chocolatey\\choco.exe install sqlserver-cmdlineutils -y",
                      "waitAfterCompletion": "240"
                    }
              }
            },
            "post_reboot": {
              "commands": {
                "01-restart": {
                  "command": {
                    "Fn::Join": [
                      "",
                      [
                        "powershell.exe -Command \"Rename-Computer -NewName 'WorkerNode' -Restart -Force\""
                      ]
                    ]
                  },
                  "waitAfterCompletion": "forever"
                }
              }
            },
            "signal_complete": {
              "commands": {
                "1-signal-resource": {
                  "command": {
                    "Fn::Join": [
                      "",
                      [
                        "cfn-signal.exe -e %ERRORLEVEL% --resource WorkerNode --stack ",
                        {
                          "Ref": "AWS::StackName"
                        },
                        "         --region ",
                        {
                          "Ref": "AWS::Region"
                        }
                      ]
                    ]
                  }
                }
              }
            }
          }
        },
        "Properties": {
          "ImageId": { "Fn::FindInMap" : [ "RegionToAMIID", { "Ref" : "AWS::Region" }, "WorkerMachine" ]},
          "Tags": [
            {
              "Key": "Name",
              "Value": "WorkerNode"
            }
          ],
          "InstanceType": { "Ref": "InstanceTypeParameter" },
          "BlockDeviceMappings": [ {"DeviceName" : "/dev/sda1", "Ebs" : {"VolumeSize" : "50"}}],
          "SubnetId": { "Ref": "Pub1" },
          "IamInstanceProfile": { "Ref": "A2CInstanceProfile"},
          "SecurityGroupIds": [ { "Ref": "a2cEC2SecurityGroup" } ]
        }
      }
  },
  
  "Outputs": {
    "StackName": {
      "Description": "Name of the stack",
      "Value": { "Ref": "AWS::StackName" }
    },
    "VPCId": {
      "Description": "Dev VPC",
      "Value": { "Ref": "a2cVPC" },
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}-VPC" } }
    },
    "PublicSubnet1": {
      "Description": "Public subnet 1 id",
      "Value": { "Ref": "Pub1" },
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}-Public-Subnet-1" } }
    },
    "PublicSubnet2": {
      "Description": "Public subnet 2 id",
      "Value": { "Ref": "Pub2" },
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}-Public-Subnet-2" } }
    },
    "PrivateSubnet1": {
      "Description": "Private subnet 1 id",
      "Value": { "Ref": "Pri1" },
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}-Private-Subnet-1" } }
    },
    "PrivateSubnet2": {
      "Description": "Private subnet 2 id",
      "Value": { "Ref": "Pri2" },
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}-Private-Subnet-2" } }
    },
    "a2cEC2SecurityGroup": {
      "Description": "DevMachine security group",
      "Value": { "Ref": "a2cEC2SecurityGroup" },
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}-MyEC2-SecurityGroup" } }
    },
    "EC2UserName": {
      "Description": "User Name for Source and Worker machine",
      "Value": "a2cStudent"
      }
  }
}
