---
AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for setting up AWS health event with Eventbridge
Resources:

  awshealtheventsbucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub  aws-health-events-records-${AWS::AccountId}-${AWS::Region}
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
            BlockPublicAcls : true
            BlockPublicPolicy : true
            IgnorePublicAcls : true
            RestrictPublicBuckets : true

  FirehoseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: HealthEventsFirehoseLogs
          
  FirehoseLogStream:      
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: !Ref FirehoseLogGroup
      LogStreamName: HealthEventsFirehoStream


  MyKinesisFirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: aws-health-events-Delivery-Stream
      DeliveryStreamType: DirectPut
      S3DestinationConfiguration:
        BucketARN: !GetAtt awshealtheventsbucket.Arn
        RoleARN: !GetAtt EventbrigeFirehoseRole.Arn
        Prefix: "aws-health-events/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/"
        ErrorOutputPrefix: "aws-health-events-firehose-error/"
        CloudWatchLoggingOptions:
             Enabled: true
             LogGroupName: !Ref FirehoseLogGroup
             LogStreamName: !Ref FirehoseLogStream
  FirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: Amazon_EventBridge_Invoke_Firehose
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                 - firehose:PutRecord
                 - firehose:PutRecordBatch
                Resource: !GetAtt MyKinesisFirehoseDeliveryStream.Arn
  EventbrigeFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        # Policy allowing CloudWatch Logs access
        - PolicyName: cloudwatch-logs-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/*"
        - PolicyName: AllowS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowS3Access
                Effect: Allow
                Action:
                  - "s3:AbortMultipartUpload"
                  - "s3:GetBucketLocation"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:ListBucketMultipartUploads"
                  - "s3:PutObject"
                Resource:
                  - !Sub "arn:aws:s3:::${awshealtheventsbucket}"
                  - !Sub "arn:aws:s3:::${awshealtheventsbucket}*"
  healthAthenaDatabase:
    Type: AWS::Glue::Database
    Properties:
      DatabaseInput:
        Name: 'aws-health-event-records'
      CatalogId: !Ref AWS::AccountId
  healtheventGlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: aws-health-event-crawler
      Role: !GetAtt GlueCrawlerRole.Arn
      DatabaseName: !Ref healthAthenaDatabase
      Targets:
        S3Targets:
          - Path: !Ref awshealtheventsbucket
      Schedule: 
        ScheduleExpression: cron(0 */1 * * ? *)
  GlueCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - glue.amazonaws.com
            Action: 
              - sts:AssumeRole
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Path: /
      Policies:
        - PolicyName: aws-health-events-GlueCrawlerRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['s3:ListBucket', 's3:GetObject']
                Resource: 
                  - !Sub "arn:aws:s3:::${awshealtheventsbucket}*"
              - Effect: Allow
                Action: 
                 - "s3:PutObject"
                 - "s3:GetObject"
                Resource: 
                  - !Sub "arn:aws:s3:::${awshealtheventsbucket}*"
                  - '*'
  healthAthenaView:
    Type: AWS::Athena::NamedQuery
    Properties:
      Name: AWS_health_summary_view
      Database: aws-cost-anomalies-db
      QueryString: >
          CREATE OR REPLACE VIEW "aws_health_view" AS
          SELECT DISTINCT
            "year"
          , "month"
          , "day"
          , "eventarn"
          , "service"
          , "communicationid"
          , "eventregion"
          , "eventtypecode"
          , "eventtypecategory"
          , date_format(date_parse(regexp_replace("starttime", ' GMT$', ''),'%a, %e %b %Y %H:%i:%s'), '%Y-%m-%d-%H:%i') AS event_starttime
          , date_format(date_parse(regexp_replace("endtime", ' GMT$', ''),'%a, %e %b %Y %H:%i:%s'), '%Y-%m-%d-%H:%i') AS event_endtime
          , date_format(date_parse(regexp_replace("lastupdatedtime", ' GMT$', ''),'%a, %e %b %Y %H:%i:%s'), '%Y-%m-%d-%H:%i') AS event_lastupdatedtime
          , "language"
          , "latestdescription"
          , "entityvalue" "affected_resource"
          , "deprecatedversion"
          , (CASE WHEN (endtime IS NOT NULL) THEN 'Closed' ELSE 'Open' END) event_status
          FROM
            "Table Name"
          GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
  healtheventrule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern:
        source:
          - aws.health
        detail-type:
          - AWS Health Event
      Name: aws-health-events-records
      State: ENABLED
      Targets:
        - Id: health-event-target
          Arn: !GetAtt MyKinesisFirehoseDeliveryStream.Arn
          RoleArn: !GetAtt FirehoseRole.Arn
          InputTransformer:
            InputPathsMap:
              eventArn: $.detail.eventArn
              latestDescription: $.detail.eventDescription[0].latestDescription
              eventTypeCode: $.detail.eventTypeCode
              entityValue: $.detail.affectedEntities[0].entityValue
              service: $.detail.service
              communicationId: $.detail.communicationId
              lastUpdatedTime: $.detail.lastUpdatedTime
              language: $.detail.eventDescription[0].language
              startTime: $.detail.startTime
              endTime: $.detail.endTime
              eventRegion: $.detail.eventRegion
              eventTypeCategory: $.detail.eventTypeCategory
              deprecatedVersion: $.detail.eventMetadata.deprecated_versions
            InputTemplate: >-
              {"eventArn": "<eventArn>","service": "<service>","communicationId":"<communicationId>","lastUpdatedTime": "<lastUpdatedTime>","eventRegion": "<eventRegion>","eventTypeCode": "<eventTypeCode>","eventTypeCategory": "<eventTypeCategory>","startTime": "<startTime>","endTime": "<endTime>","language": "<language>","latestDescription": "<latestDescription>","entityValue": "<entityValue>","deprecatedVersion": "<deprecatedVersion>"}
Outputs:
  # Output the event bus ARN
  EventbusruleArn:
    Value: !GetAtt healtheventrule.Arn
