---
AWSTemplateFormatVersion: '2010-09-09'
Description: Retrieves AWS Cost Explorer Cost Anomalies details
Resources:
  awscostanomolybucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub  aws-cost-anomalies-${AWS::AccountId}-${AWS::Region}
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
            BlockPublicAcls : true
            BlockPublicPolicy : true
            IgnorePublicAcls : true
            RestrictPublicBuckets : true
  costanomoliesGlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: aws-cost-anomolies
      Role: !Ref costanomoliesGlueCrawlerRole
      DatabaseName: aws-cost-anomalies-db
      Targets:
        S3Targets:
          - Path: !Ref awscostanomolybucket

  costanomoliesGlueCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - glue.amazonaws.com
            Action: 
              - sts:AssumeRole
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Path: /
      Policies:
        - PolicyName: CE-GlueCrawlerRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['s3:ListBucket', 's3:GetObject']
                Resource: 
                  - !Sub "arn:aws:s3:::${awscostanomolybucket}*"
              - Effect: Allow
                Action: 
                 - "s3:PutObject"
                 - "s3:GetObject"
                Resource: 
                  - !Sub "arn:aws:s3:::${awscostanomolybucket}*"
                  - '*'
  costanomoliesLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub
        - 'aws-cost-anomolies-${Id}'
        - Id: !Select [0, !Split ['-', !Ref AWS::StackName]]
      
      Handler: 'index.lambda_handler'
      Runtime: python3.8
      MemorySize: 2688
      Timeout: 60
      Role: 
        Fn::GetAtt:
         - costanomoliesLambdaFunctionRole
         - Arn
      Environment:
        Variables:
          S3_BUCKET: !Ref awscostanomolybucket
          CRAWLER_NAME: !Ref costanomoliesGlueCrawler
          PREFIX: aws-cost-anomolies
          AWSAccountId: ${AWS::AccountId}
      Code:
        ZipFile: |
          import boto3.session
          import boto3
          from boto3.s3.transfer import S3Transfer
          from datetime import date, timedelta, datetime
          import logging
          import json
          import os
          BENEFITS_CONSIDERED = True
          bucket = os.environ['S3_BUCKET']
          CRAWLER_NAME = os.environ['CRAWLER_NAME']
          prefix = os.environ['PREFIX']
          AWSAccountId = os.environ['AWSAccountId']


          def start_crawler():
              glue_client = boto3.client('glue')
              try:
                  glue_client.start_crawler(Name=CRAWLER_NAME)
              except Exception as e:
                  # Send some context about this error to Lambda Logs
                  logging.warning("%s" % e)

          def store_data_to_s3(flattened_data, path):
              today = date.today()
              year = today.year
              month = today.strftime('%m')
              day = today.day
              local_file = '/tmp/tmp.json'
              with open(local_file, 'w') as f:
                  #json.dump(flattened_data, f, default=str)
                  f.write('\n' .join([json.dumps(result) for result in flattened_data]))

              if os.path.getsize(local_file) == 0:
                  print(f"No data in file for {path}")
                  return
            
              s3client = boto3.client('s3')
              key = f"{path}/AccountID={AWSAccountId}/year={year}/month={month}/day={day}/{year}-{month}-{day}.json"
              print(f"Uploading file {local_file} to {bucket}/{key}")
              S3Transfer(s3client).upload_file(local_file, bucket, key, extra_args={'ACL': 'bucket-owner-full-control'})
              print('file upload successful')

          ce = boto3.client('ce')

          def get_ce_costanomaly(start_date, end_date):
              client = boto3.client('ce')
              
              response_list = []
              next_token = ''
              while True:
                  response = client.get_anomalies(
                      DateInterval={

                          'StartDate': str(start_date),
                          'EndDate': str(end_date)
                      },
                      MaxResults=100
                  )
                  response_list.append(response)
                  if 'NextPageToken' in response:
                      next_token = response['NextPageToken']
                  else:
                      break
              return response_list
          def flatten_results(results):
              flattened_results = []
              for result in results:
                  for anomaly in result['Anomalies']:
                      flattened_anomaly = {
                          'AnomalyId': anomaly['AnomalyId'],
                          'AnomalyStartDate': anomaly['AnomalyStartDate'],
                          'AnomalyEndDate': anomaly['AnomalyEndDate'],
                          'DimensionValue': anomaly['DimensionValue'],
                          'MaxImpact': anomaly['Impact']['MaxImpact'],
                          'TotalActualSpend': anomaly['Impact']['TotalActualSpend'],
                          'TotalExpectedSpend': anomaly['Impact']['TotalExpectedSpend'],
                          'TotalImpact': anomaly['Impact']['TotalImpact'],
                          'TotalImpactpercentage': anomaly['Impact'].get('TotalImpactPercentage', 0),
                          'MonitorArn': anomaly['MonitorArn'],
                          'LinkedAccount': anomaly['RootCauses'][0].get('LinkedAccount'),
                          'LinkedAccountName': anomaly['RootCauses'][0].get('LinkedAccountName'),
                          'Region': anomaly['RootCauses'][0].get('Region'),
                          'Service': anomaly['RootCauses'][0].get('Service'),
                          'UsageType': anomaly['RootCauses'][0].get('UsageType')
                      }
                      flattened_results.append(flattened_anomaly)
              return flattened_results 
          def calculate_dates():
              # Set the start date as today minus 90 days as Cost anomolies are available for last 90days
              start_date = datetime.now().date() - timedelta(days=90)
              # Set the end date as today
              end_date = datetime.now().date()
              # Check if there are any objects in the S3 bucket
              s3_bucket_name = bucket
              s3_client = boto3.client('s3')
              objects = s3_client.list_objects_v2(Bucket=s3_bucket_name)
              if 'Contents' in objects:
                  last_modified_date = get_last_modified_date(objects['Contents'])
                  if last_modified_date is not None and last_modified_date >= start_date:
                      start_date = last_modified_date
                  if end_date == datetime.now().date():
                      # Set the start date as end date minus 1 day
                      start_date = end_date - timedelta(days=1)
              return start_date, end_date
          def get_last_modified_date(contents):
              last_modified_dates = [obj['LastModified'].date() for obj in contents]
              last_modified_dates_within_90_days = [date for date in last_modified_dates if date >= datetime.now().date() - timedelta(days=90)]
              if last_modified_dates_within_90_days:
                  return max(last_modified_dates_within_90_days)
              return None
          def lambda_handler(event, context):
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)
              sts_connection = boto3.client('sts')
              start_date, end_date = calculate_dates()
              # Call cost anomomaly detection API
              response_list = get_ce_costanomaly(start_date, end_date)
              flattened_data = flatten_results(response_list)
              store_data_to_s3(flattened_data, prefix)
              start_crawler()
              return "Successful"  


  costanomoliesLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWS-Cost-Anomolies-Execute-Lambda
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
  S3BucketAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Cost-Anomaly-S3BucketAccessPolicy
      Roles:
        - !Ref costanomoliesLambdaFunctionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:PutObject
              - s3:GetObject
            Resource: 
              - !Sub "arn:aws:s3:::${awscostanomolybucket}"
              - !Sub "arn:aws:s3:::${awscostanomolybucket}/*"
  costanomoliesGlueCrawlerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Cost-Anomaly-GlueCrawlerPolicy
      Roles:
        - !Ref costanomoliesLambdaFunctionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - glue:StartCrawler
            Resource: 
              - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:crawler/${costanomoliesGlueCrawler}
  costanomoliesCloudWatchLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Cost-Anomaly-CloudWatchLogsPolicy
      Roles:
        - !Ref costanomoliesLambdaFunctionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
  CostExplorerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CE-A-CostExplorerPolicy
      Roles:
        - !Ref costanomoliesLambdaFunctionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ce:GetAnomalies
            Resource: "*"
  costanomoliesAthenaView:
    Type: AWS::Athena::NamedQuery
    Properties:
      Name: AWS-Cost-Anomaly
      Database: aws-cost-anomalies-db
      QueryString: >
          CREATE OR REPLACE VIEW "ca_summary_view" AS 
          SELECT DISTINCT
            "year"
          , "month"
          , anomalyid
          , dimensionvalue
          , CAST("from_iso8601_timestamp"("anomalystartdate") AS date) anomaly_start_date
          , CAST("from_iso8601_timestamp"("anomalyenddate") AS date) anomalylastupdatedate
          , CAST(maximpact AS int) maximpact
          , CAST(totalactualspend AS int) totalactualspend
          , CAST(totalexpectedspend AS int) totalexpectedspend
          , CAST(totalimpact AS int) tota_impact
          , CAST(totalimpactpercentage AS int) totalimpactpercentage
          , (CASE WHEN ((anomalyenddate IS NULL) OR (CAST("substring"(anomalyenddate, 1, 10) AS date) < (current_date - INTERVAL  '2' DAY))) THEN 'Closed' ELSE 'Open' END) Status
          , monitorarn
          , region
          , service
          , linkedaccount
          , linkedaccountname
          , usagetype
          FROM
            "optimization_data"."cost_explorer_cost_anomaly"
          WHERE ("date_parse"("concat"("year", "month", "day"), '%Y%m%d') >= (current_timestamp - INTERVAL  '1' MONTH))
          GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18  
  costanomoliesCronjobsScheduledRule:
    Type: AWS::Scheduler::Schedule
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
           - E3001
    Properties:
      Description: Scheduled Rule to run Lambda function for aws cost anomolies
      GroupName: default
      Name: ce-lambda-schedule
      FlexibleTimeWindow:
        Mode: 'OFF'
      ScheduleExpression: rate(24 hours)
      State: ENABLED 
      Target:
        Arn: !GetAtt costanomoliesLambdaFunction.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
  SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SchedulerRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: scheduler.amazonaws.com
          Action: sts:AssumeRole
  SchedulerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: aws-cost-anomoaly-SchedulerPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - lambda:InvokeFunction
          Resource: !GetAtt costanomoliesLambdaFunction.Arn
      Roles:
        - Ref: "SchedulerRole"
Outputs:
  CostExplorercostanomoliesLambdaRoleARN:
    Description: Role for Lambda execution of AWS Cost Explorer cost anomolies extraction.
    Value:
      Fn::GetAtt:
        - costanomoliesLambdaFunctionRole
        - Arn
  LambdaCostExplorerRightsizingARN:
    Description: Lambda function ARN for retrieving AWS Cost Explorer cost anomolies extraction
    Value:
      Fn::GetAtt:
        - costanomoliesLambdaFunction
        - Arn
  GlueCrawler:
    Value:
      Ref: costanomoliesGlueCrawler

    
